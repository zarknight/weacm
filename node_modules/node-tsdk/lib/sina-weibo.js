/*********************************************
 * Sina Weibo API
 *********************************************/
var TApi = require('./base').TApi,
	util = require('util'),
	request = require('request');

const SINA_WEIBO_URI = 'https://api.weibo.com/2/';
const SINA_WEIBO_ACCESSTOKEN_URL = 'https://api.weibo.com/oauth2/access_token';
const SINA_WEIBO_AUTHORIZE_URL = 'https://api.weibo.com/oauth2/authorize';

var defaultResultHandler = function(err, resp, body, callback) {
    if (err) {
        callback(err);
    } else {
        var result = JSON.parse(body);

        if (result.error) {
            // result => error, error_code, request, error_uri, error_description
            callback(result);
        } else {
            // result => access_token, expires_in, uid
            callback(null, result);
        }
    }
};

var WeiboSDK = this.WeiboSDK = function(options) {
	TApi.call(this, options);
};

util.inherits(WeiboSDK, TApi);

// oauth2/authorize
WeiboSDK.prototype.authorize = function(params, callback) {
	var query = {
		'client_id': this.appkey,
		'redirect_uri': this.redirect_uri
	};

    // supported response_type: code|token
	if (params && params.response_type) {
		query.response_type = params.response_type;
	} else {
		query.response_type = 'code';
	}

	if (params.state) {
		query.state = params.state;
	}

    // supported display: default|mobile|popup|wap1.2|wap2.0|js|apponweibo
	if (params.display) {
		query.display = params.display;
	}

	request.get(SINA_WEIBO_AUTHORIZE_URL, {
		qs: query
	}, function(err, resp, body) {
		if (callback) {
			if (err) {
				callback(err);
			} else {
				callback(null, resp, body);
			}
		}
	});
};

// oauth2/access_token
WeiboSDK.prototype.getAccessToken = function(params, callback) {
    var grantType = params.grant_type;

	var query = {
		'client_id': this.appkey,
		'client_secret': this.appsecret,
		'grant_type': grantType   // authorization_code|password|refresh_token
	};

    if (grantType === 'authorization_code') {
        query.code = params.code;
        query.redirect_uri = this.redirect_uri;
    } else if (grantType === 'password') {
        query.username = params.username;
        query.password = params.password;
    }

	request.post(SINA_WEIBO_ACCESSTOKEN_URL, {
		qs: query
	}, function(err, resp, body) {
        defaultResultHandler(err, resp, body, callback);
    });
};

WeiboSDK.prototype.getAccessTokenByCode = function(code, callback) {
    this.getAccessToken({
        'grant_type': 'authorization_code',
        'code': code
    }, callback);
};

// statuses/public_timeline.json
WeiboSDK.prototype.getPublicTimeline = function(params, callback) {
    var query = {
        'source': this.appkey,
        'access_token': params.access_token
    };

    if (params.count != null) {
        query.count = params.count;
    }
    if (params.page != null) {
        query.page = params.page;
    }
    if (params.base_app != null) {
        query.base_app = params.base_app;
    }

    request.get(SINA_WEIBO_URI + 'statuses/public_timeline.json', {
        qs: query
    }, function(err, resp, body) {
        defaultResultHandler(err, resp, body, callback);
    });
};

// statuses/friends_timeline.json
WeiboSDK.prototype.getFriendsTimeline = function(params, callback) {
    var query = {
        'source': this.appkey,
        'access_token': params.access_token
    };

    if (params.since_id != null) {
        query.since_id = params.since_id;
    }
    if (params.max_id != null) {
        query.max_id = params.max_id;
    }
    if (params.count != null) {
        query.count = params.count;
    }
    if (params.page != null) {
        query.page = params.page;
    }
    if (params.base_app != null) {
        query.base_app = params.base_app;
    }
    if (params.feature != null) {
        query.feature = params.feature;
    }
    if (params.trim_user != null) {
        query.trim_user = params.trim_user;
    }

    request.get(SINA_WEIBO_URI + 'statuses/friends_timeline.json', {
        qs: query
    }, function(err, resp, body) {
        defaultResultHandler(err, resp, body, callback);
    });
};
